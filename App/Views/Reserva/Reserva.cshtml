@model App.Entity.Reserva

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()


    if (ViewBag.Message != null)
    {
        <script>
           swal({
               title: "Reserva Registrada",
               text: "@ViewBag.Message",
               icon: "success"
           });
        </script>
    }

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Dni, "Dni", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Dni, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Dni, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cliente.Nombre, "Nombre", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cliente.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cliente.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cliente.ApellidoPaterno, "ApellidoPaterno", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cliente.ApellidoPaterno, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cliente.ApellidoPaterno, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cliente.ApellidoMaterno, "ApellidoMaterno", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cliente.ApellidoMaterno, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cliente.ApellidoMaterno, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.Hidden("IdHabitacion")
        <div class="form-group">
            @Html.LabelFor(model => model.Habitacion.Numero, "Numero", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Habitacion.Numero, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Habitacion.Numero, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Fecha, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="text" class="form-control" name="Fecha" readonly value="@DateTime.Now.ToShortDateString()">
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Realizar Reserva" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@Html.Action("Habitaciones", "Reserva")

<button class="btn btn-success" onclick="$('#modal-habitaciones').modal('show');">Disponibilidad</button>

@section Scripts {
    <script>

        var CLIENTES = @Html.Raw(ViewBag.JsonClientes);

        $(function(){
        
            $( "#Dni" ).autocomplete({
                minLength: 0,
                source:  function(request, response) {

                    response($.map(CLIENTES, function(item) {
                        if (item.Dni.includes(request.term) || 
                            item.Nombre.toLowerCase().includes(request.term.toLowerCase()) || 
                            item.ApellidoPaterno.toLowerCase().includes(request.term.toLowerCase())) {
                            return {
                                Dni: item.Dni,
                                Nombre: item.Nombre,
                                ApellidoPaterno: item.ApellidoPaterno,
                                ApellidoMaterno: item.ApellidoMaterno
                            };
                        }
                        return ;
                        
                    }));

                },
                focus: function( event, ui ) {
                    console.log(ui);
                    $( "#Dni" ).val( ui.item.Dni );
                    return false;
                },
                select: function( event, ui ) {
                    $( "#Dni" ).val( ui.item.Dni );
                    $( "#Cliente_Nombre" ).val( ui.item.Nombre );
                    $( "#Cliente_ApellidoPaterno" ).val( ui.item.ApellidoPaterno );
                    $( "#Cliente_ApellidoMaterno" ).val( ui.item.ApellidoMaterno );
 
                    return false;
                },
                messages: {
                    noResults: '',
                    results: function() {}
                }
            })
            .autocomplete( "instance" )._renderItem = function( ul, item ) {
                return $( "<li>" )
                  .append( "<div><strong>DNI: </strong>" + item.Dni + " <strong>Nombre: </strong>" + item.Nombre + " " + item.ApellidoPaterno + "</div>" )
                  .appendTo( ul );
            };

        });
       
    </script>
}